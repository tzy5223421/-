//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace WebService1 {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class DataSet1 : DataSet {
        
        private changjiaDataTable tablechangjia;
        
        private 维护DataTable table维护;
        
        private sbnameDataTable tablesbname;
        
        public DataSet1() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected DataSet1(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["changjia"] != null)) {
                    this.Tables.Add(new changjiaDataTable(ds.Tables["changjia"]));
                }
                if ((ds.Tables["维护"] != null)) {
                    this.Tables.Add(new 维护DataTable(ds.Tables["维护"]));
                }
                if ((ds.Tables["sbname"] != null)) {
                    this.Tables.Add(new sbnameDataTable(ds.Tables["sbname"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public changjiaDataTable changjia {
            get {
                return this.tablechangjia;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public 维护DataTable 维护 {
            get {
                return this.table维护;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public sbnameDataTable sbname {
            get {
                return this.tablesbname;
            }
        }
        
        public override DataSet Clone() {
            DataSet1 cln = ((DataSet1)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["changjia"] != null)) {
                this.Tables.Add(new changjiaDataTable(ds.Tables["changjia"]));
            }
            if ((ds.Tables["维护"] != null)) {
                this.Tables.Add(new 维护DataTable(ds.Tables["维护"]));
            }
            if ((ds.Tables["sbname"] != null)) {
                this.Tables.Add(new sbnameDataTable(ds.Tables["sbname"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tablechangjia = ((changjiaDataTable)(this.Tables["changjia"]));
            if ((this.tablechangjia != null)) {
                this.tablechangjia.InitVars();
            }
            this.table维护 = ((维护DataTable)(this.Tables["维护"]));
            if ((this.table维护 != null)) {
                this.table维护.InitVars();
            }
            this.tablesbname = ((sbnameDataTable)(this.Tables["sbname"]));
            if ((this.tablesbname != null)) {
                this.tablesbname.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "DataSet1";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/DataSet1.xsd";
            this.Locale = new System.Globalization.CultureInfo("zh-CN");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tablechangjia = new changjiaDataTable();
            this.Tables.Add(this.tablechangjia);
            this.table维护 = new 维护DataTable();
            this.Tables.Add(this.table维护);
            this.tablesbname = new sbnameDataTable();
            this.Tables.Add(this.tablesbname);
        }
        
        private bool ShouldSerializechangjia() {
            return false;
        }
        
        private bool ShouldSerialize维护() {
            return false;
        }
        
        private bool ShouldSerializesbname() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void changjiaRowChangeEventHandler(object sender, changjiaRowChangeEvent e);
        
        public delegate void 维护RowChangeEventHandler(object sender, 维护RowChangeEvent e);
        
        public delegate void sbnameRowChangeEventHandler(object sender, sbnameRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class changjiaDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn column厂家id;
            
            private DataColumn column厂家名称;
            
            internal changjiaDataTable() : 
                    base("changjia") {
                this.InitClass();
            }
            
            internal changjiaDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn 厂家idColumn {
                get {
                    return this.column厂家id;
                }
            }
            
            internal DataColumn 厂家名称Column {
                get {
                    return this.column厂家名称;
                }
            }
            
            public changjiaRow this[int index] {
                get {
                    return ((changjiaRow)(this.Rows[index]));
                }
            }
            
            public event changjiaRowChangeEventHandler changjiaRowChanged;
            
            public event changjiaRowChangeEventHandler changjiaRowChanging;
            
            public event changjiaRowChangeEventHandler changjiaRowDeleted;
            
            public event changjiaRowChangeEventHandler changjiaRowDeleting;
            
            public void AddchangjiaRow(changjiaRow row) {
                this.Rows.Add(row);
            }
            
            public changjiaRow AddchangjiaRow(string 厂家名称) {
                changjiaRow rowchangjiaRow = ((changjiaRow)(this.NewRow()));
                rowchangjiaRow.ItemArray = new object[] {
                        null,
                        厂家名称};
                this.Rows.Add(rowchangjiaRow);
                return rowchangjiaRow;
            }
            
            public changjiaRow FindBy厂家id(int 厂家id) {
                return ((changjiaRow)(this.Rows.Find(new object[] {
                            厂家id})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                changjiaDataTable cln = ((changjiaDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new changjiaDataTable();
            }
            
            internal void InitVars() {
                this.column厂家id = this.Columns["厂家id"];
                this.column厂家名称 = this.Columns["厂家名称"];
            }
            
            private void InitClass() {
                this.column厂家id = new DataColumn("厂家id", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column厂家id);
                this.column厂家名称 = new DataColumn("厂家名称", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column厂家名称);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.column厂家id}, true));
                this.column厂家id.AutoIncrement = true;
                this.column厂家id.AllowDBNull = false;
                this.column厂家id.ReadOnly = true;
                this.column厂家id.Unique = true;
            }
            
            public changjiaRow NewchangjiaRow() {
                return ((changjiaRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new changjiaRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(changjiaRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.changjiaRowChanged != null)) {
                    this.changjiaRowChanged(this, new changjiaRowChangeEvent(((changjiaRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.changjiaRowChanging != null)) {
                    this.changjiaRowChanging(this, new changjiaRowChangeEvent(((changjiaRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.changjiaRowDeleted != null)) {
                    this.changjiaRowDeleted(this, new changjiaRowChangeEvent(((changjiaRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.changjiaRowDeleting != null)) {
                    this.changjiaRowDeleting(this, new changjiaRowChangeEvent(((changjiaRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovechangjiaRow(changjiaRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class changjiaRow : DataRow {
            
            private changjiaDataTable tablechangjia;
            
            internal changjiaRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablechangjia = ((changjiaDataTable)(this.Table));
            }
            
            public int 厂家id {
                get {
                    return ((int)(this[this.tablechangjia.厂家idColumn]));
                }
                set {
                    this[this.tablechangjia.厂家idColumn] = value;
                }
            }
            
            public string 厂家名称 {
                get {
                    try {
                        return ((string)(this[this.tablechangjia.厂家名称Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tablechangjia.厂家名称Column] = value;
                }
            }
            
            public bool Is厂家名称Null() {
                return this.IsNull(this.tablechangjia.厂家名称Column);
            }
            
            public void Set厂家名称Null() {
                this[this.tablechangjia.厂家名称Column] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class changjiaRowChangeEvent : EventArgs {
            
            private changjiaRow eventRow;
            
            private DataRowAction eventAction;
            
            public changjiaRowChangeEvent(changjiaRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public changjiaRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class 维护DataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn column设备编号;
            
            private DataColumn column出厂日期;
            
            private DataColumn column经手人;
            
            private DataColumn column登记日期;
            
            private DataColumn column具体时间;
            
            private DataColumn column故障部件;
            
            private DataColumn column故障名称;
            
            private DataColumn column设备名称;
            
            private DataColumn column实验室名;
            
            private DataColumn column故障id;
            
            private DataColumn column厂家名称;
            
            internal 维护DataTable() : 
                    base("维护") {
                this.InitClass();
            }
            
            internal 维护DataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn 设备编号Column {
                get {
                    return this.column设备编号;
                }
            }
            
            internal DataColumn 出厂日期Column {
                get {
                    return this.column出厂日期;
                }
            }
            
            internal DataColumn 经手人Column {
                get {
                    return this.column经手人;
                }
            }
            
            internal DataColumn 登记日期Column {
                get {
                    return this.column登记日期;
                }
            }
            
            internal DataColumn 具体时间Column {
                get {
                    return this.column具体时间;
                }
            }
            
            internal DataColumn 故障部件Column {
                get {
                    return this.column故障部件;
                }
            }
            
            internal DataColumn 故障名称Column {
                get {
                    return this.column故障名称;
                }
            }
            
            internal DataColumn 设备名称Column {
                get {
                    return this.column设备名称;
                }
            }
            
            internal DataColumn 实验室名Column {
                get {
                    return this.column实验室名;
                }
            }
            
            internal DataColumn 故障idColumn {
                get {
                    return this.column故障id;
                }
            }
            
            internal DataColumn 厂家名称Column {
                get {
                    return this.column厂家名称;
                }
            }
            
            public 维护Row this[int index] {
                get {
                    return ((维护Row)(this.Rows[index]));
                }
            }
            
            public event 维护RowChangeEventHandler 维护RowChanged;
            
            public event 维护RowChangeEventHandler 维护RowChanging;
            
            public event 维护RowChangeEventHandler 维护RowDeleted;
            
            public event 维护RowChangeEventHandler 维护RowDeleting;
            
            public void Add维护Row(维护Row row) {
                this.Rows.Add(row);
            }
            
            public 维护Row Add维护Row(string 设备编号, System.DateTime 出厂日期, string 经手人, System.DateTime 登记日期, string 具体时间, string 故障部件, string 故障名称, string 设备名称, string 实验室名, string 厂家名称) {
                维护Row row维护Row = ((维护Row)(this.NewRow()));
                row维护Row.ItemArray = new object[] {
                        设备编号,
                        出厂日期,
                        经手人,
                        登记日期,
                        具体时间,
                        故障部件,
                        故障名称,
                        设备名称,
                        实验室名,
                        null,
                        厂家名称};
                this.Rows.Add(row维护Row);
                return row维护Row;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                维护DataTable cln = ((维护DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new 维护DataTable();
            }
            
            internal void InitVars() {
                this.column设备编号 = this.Columns["设备编号"];
                this.column出厂日期 = this.Columns["出厂日期"];
                this.column经手人 = this.Columns["经手人"];
                this.column登记日期 = this.Columns["登记日期"];
                this.column具体时间 = this.Columns["具体时间"];
                this.column故障部件 = this.Columns["故障部件"];
                this.column故障名称 = this.Columns["故障名称"];
                this.column设备名称 = this.Columns["设备名称"];
                this.column实验室名 = this.Columns["实验室名"];
                this.column故障id = this.Columns["故障id"];
                this.column厂家名称 = this.Columns["厂家名称"];
            }
            
            private void InitClass() {
                this.column设备编号 = new DataColumn("设备编号", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column设备编号);
                this.column出厂日期 = new DataColumn("出厂日期", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column出厂日期);
                this.column经手人 = new DataColumn("经手人", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column经手人);
                this.column登记日期 = new DataColumn("登记日期", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column登记日期);
                this.column具体时间 = new DataColumn("具体时间", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column具体时间);
                this.column故障部件 = new DataColumn("故障部件", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column故障部件);
                this.column故障名称 = new DataColumn("故障名称", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column故障名称);
                this.column设备名称 = new DataColumn("设备名称", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column设备名称);
                this.column实验室名 = new DataColumn("实验室名", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column实验室名);
                this.column故障id = new DataColumn("故障id", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column故障id);
                this.column厂家名称 = new DataColumn("厂家名称", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column厂家名称);
                this.column故障id.AutoIncrement = true;
                this.column故障id.AllowDBNull = false;
                this.column故障id.ReadOnly = true;
            }
            
            public 维护Row New维护Row() {
                return ((维护Row)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new 维护Row(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(维护Row);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.维护RowChanged != null)) {
                    this.维护RowChanged(this, new 维护RowChangeEvent(((维护Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.维护RowChanging != null)) {
                    this.维护RowChanging(this, new 维护RowChangeEvent(((维护Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.维护RowDeleted != null)) {
                    this.维护RowDeleted(this, new 维护RowChangeEvent(((维护Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.维护RowDeleting != null)) {
                    this.维护RowDeleting(this, new 维护RowChangeEvent(((维护Row)(e.Row)), e.Action));
                }
            }
            
            public void Remove维护Row(维护Row row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class 维护Row : DataRow {
            
            private 维护DataTable table维护;
            
            internal 维护Row(DataRowBuilder rb) : 
                    base(rb) {
                this.table维护 = ((维护DataTable)(this.Table));
            }
            
            public string 设备编号 {
                get {
                    try {
                        return ((string)(this[this.table维护.设备编号Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.table维护.设备编号Column] = value;
                }
            }
            
            public System.DateTime 出厂日期 {
                get {
                    try {
                        return ((System.DateTime)(this[this.table维护.出厂日期Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.table维护.出厂日期Column] = value;
                }
            }
            
            public string 经手人 {
                get {
                    try {
                        return ((string)(this[this.table维护.经手人Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.table维护.经手人Column] = value;
                }
            }
            
            public System.DateTime 登记日期 {
                get {
                    try {
                        return ((System.DateTime)(this[this.table维护.登记日期Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.table维护.登记日期Column] = value;
                }
            }
            
            public string 具体时间 {
                get {
                    try {
                        return ((string)(this[this.table维护.具体时间Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.table维护.具体时间Column] = value;
                }
            }
            
            public string 故障部件 {
                get {
                    try {
                        return ((string)(this[this.table维护.故障部件Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.table维护.故障部件Column] = value;
                }
            }
            
            public string 故障名称 {
                get {
                    try {
                        return ((string)(this[this.table维护.故障名称Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.table维护.故障名称Column] = value;
                }
            }
            
            public string 设备名称 {
                get {
                    try {
                        return ((string)(this[this.table维护.设备名称Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.table维护.设备名称Column] = value;
                }
            }
            
            public string 实验室名 {
                get {
                    try {
                        return ((string)(this[this.table维护.实验室名Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.table维护.实验室名Column] = value;
                }
            }
            
            public int 故障id {
                get {
                    return ((int)(this[this.table维护.故障idColumn]));
                }
                set {
                    this[this.table维护.故障idColumn] = value;
                }
            }
            
            public string 厂家名称 {
                get {
                    try {
                        return ((string)(this[this.table维护.厂家名称Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.table维护.厂家名称Column] = value;
                }
            }
            
            public bool Is设备编号Null() {
                return this.IsNull(this.table维护.设备编号Column);
            }
            
            public void Set设备编号Null() {
                this[this.table维护.设备编号Column] = System.Convert.DBNull;
            }
            
            public bool Is出厂日期Null() {
                return this.IsNull(this.table维护.出厂日期Column);
            }
            
            public void Set出厂日期Null() {
                this[this.table维护.出厂日期Column] = System.Convert.DBNull;
            }
            
            public bool Is经手人Null() {
                return this.IsNull(this.table维护.经手人Column);
            }
            
            public void Set经手人Null() {
                this[this.table维护.经手人Column] = System.Convert.DBNull;
            }
            
            public bool Is登记日期Null() {
                return this.IsNull(this.table维护.登记日期Column);
            }
            
            public void Set登记日期Null() {
                this[this.table维护.登记日期Column] = System.Convert.DBNull;
            }
            
            public bool Is具体时间Null() {
                return this.IsNull(this.table维护.具体时间Column);
            }
            
            public void Set具体时间Null() {
                this[this.table维护.具体时间Column] = System.Convert.DBNull;
            }
            
            public bool Is故障部件Null() {
                return this.IsNull(this.table维护.故障部件Column);
            }
            
            public void Set故障部件Null() {
                this[this.table维护.故障部件Column] = System.Convert.DBNull;
            }
            
            public bool Is故障名称Null() {
                return this.IsNull(this.table维护.故障名称Column);
            }
            
            public void Set故障名称Null() {
                this[this.table维护.故障名称Column] = System.Convert.DBNull;
            }
            
            public bool Is设备名称Null() {
                return this.IsNull(this.table维护.设备名称Column);
            }
            
            public void Set设备名称Null() {
                this[this.table维护.设备名称Column] = System.Convert.DBNull;
            }
            
            public bool Is实验室名Null() {
                return this.IsNull(this.table维护.实验室名Column);
            }
            
            public void Set实验室名Null() {
                this[this.table维护.实验室名Column] = System.Convert.DBNull;
            }
            
            public bool Is厂家名称Null() {
                return this.IsNull(this.table维护.厂家名称Column);
            }
            
            public void Set厂家名称Null() {
                this[this.table维护.厂家名称Column] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class 维护RowChangeEvent : EventArgs {
            
            private 维护Row eventRow;
            
            private DataRowAction eventAction;
            
            public 维护RowChangeEvent(维护Row row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public 维护Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class sbnameDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn column设备名称;
            
            private DataColumn column设备名称id;
            
            internal sbnameDataTable() : 
                    base("sbname") {
                this.InitClass();
            }
            
            internal sbnameDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn 设备名称Column {
                get {
                    return this.column设备名称;
                }
            }
            
            internal DataColumn 设备名称idColumn {
                get {
                    return this.column设备名称id;
                }
            }
            
            public sbnameRow this[int index] {
                get {
                    return ((sbnameRow)(this.Rows[index]));
                }
            }
            
            public event sbnameRowChangeEventHandler sbnameRowChanged;
            
            public event sbnameRowChangeEventHandler sbnameRowChanging;
            
            public event sbnameRowChangeEventHandler sbnameRowDeleted;
            
            public event sbnameRowChangeEventHandler sbnameRowDeleting;
            
            public void AddsbnameRow(sbnameRow row) {
                this.Rows.Add(row);
            }
            
            public sbnameRow AddsbnameRow(string 设备名称) {
                sbnameRow rowsbnameRow = ((sbnameRow)(this.NewRow()));
                rowsbnameRow.ItemArray = new object[] {
                        设备名称,
                        null};
                this.Rows.Add(rowsbnameRow);
                return rowsbnameRow;
            }
            
            public sbnameRow FindBy设备名称id(int 设备名称id) {
                return ((sbnameRow)(this.Rows.Find(new object[] {
                            设备名称id})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                sbnameDataTable cln = ((sbnameDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new sbnameDataTable();
            }
            
            internal void InitVars() {
                this.column设备名称 = this.Columns["设备名称"];
                this.column设备名称id = this.Columns["设备名称id"];
            }
            
            private void InitClass() {
                this.column设备名称 = new DataColumn("设备名称", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column设备名称);
                this.column设备名称id = new DataColumn("设备名称id", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column设备名称id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.column设备名称id}, true));
                this.column设备名称id.AutoIncrement = true;
                this.column设备名称id.AllowDBNull = false;
                this.column设备名称id.ReadOnly = true;
                this.column设备名称id.Unique = true;
            }
            
            public sbnameRow NewsbnameRow() {
                return ((sbnameRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new sbnameRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(sbnameRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.sbnameRowChanged != null)) {
                    this.sbnameRowChanged(this, new sbnameRowChangeEvent(((sbnameRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.sbnameRowChanging != null)) {
                    this.sbnameRowChanging(this, new sbnameRowChangeEvent(((sbnameRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.sbnameRowDeleted != null)) {
                    this.sbnameRowDeleted(this, new sbnameRowChangeEvent(((sbnameRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.sbnameRowDeleting != null)) {
                    this.sbnameRowDeleting(this, new sbnameRowChangeEvent(((sbnameRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovesbnameRow(sbnameRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class sbnameRow : DataRow {
            
            private sbnameDataTable tablesbname;
            
            internal sbnameRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablesbname = ((sbnameDataTable)(this.Table));
            }
            
            public string 设备名称 {
                get {
                    try {
                        return ((string)(this[this.tablesbname.设备名称Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tablesbname.设备名称Column] = value;
                }
            }
            
            public int 设备名称id {
                get {
                    return ((int)(this[this.tablesbname.设备名称idColumn]));
                }
                set {
                    this[this.tablesbname.设备名称idColumn] = value;
                }
            }
            
            public bool Is设备名称Null() {
                return this.IsNull(this.tablesbname.设备名称Column);
            }
            
            public void Set设备名称Null() {
                this[this.tablesbname.设备名称Column] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class sbnameRowChangeEvent : EventArgs {
            
            private sbnameRow eventRow;
            
            private DataRowAction eventAction;
            
            public sbnameRowChangeEvent(sbnameRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public sbnameRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
